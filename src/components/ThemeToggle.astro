<button
  id="theme-toggle"
  class="p-2 rounded-full hover:bg-gray-100 dark:hover:bg-gray-800 transition-all duration-300 active:scale-95"
  aria-label="Toggle theme"
>
  <svg
    class="w-5 h-5 text-gray-800 dark:text-gray-200 transition-all duration-300"
    fill="none"
    stroke="currentColor"
    viewBox="0 0 24 24"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      class="sun-icon hidden dark:block transition-all duration-300"
      stroke-linecap="round"
      stroke-linejoin="round"
      stroke-width="2"
      d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"
    />
    <path
      class="moon-icon block dark:hidden transition-all duration-300"
      stroke-linecap="round"
      stroke-linejoin="round"
      stroke-width="2"
      d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"
    />
  </svg>
</button>

<style>
  @keyframes rotate {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }

  .rotating {
    animation: rotate 0.5s ease-in-out;
  }
</style>

<script>
  // Set dark mode by default
  document.documentElement.classList.add('dark');
  localStorage.setItem('theme', 'dark');

  const handleToggleClick = () => {
    const element = document.documentElement;
    const svg = document.querySelector('#theme-toggle svg');
    
    if (svg) {
      // Add rotating animation
      svg.classList.add('rotating');
      
      // Remove animation class after it completes
      setTimeout(() => {
        svg.classList.remove('rotating');
      }, 500);
    }

    element.classList.toggle("dark");

    const isDark = element.classList.contains("dark");
    localStorage.setItem("theme", isDark ? "dark" : "light");
  }

  const themeToggle = document.getElementById("theme-toggle");
  if (themeToggle) {
    themeToggle.addEventListener("click", handleToggleClick);
  }
</script> 